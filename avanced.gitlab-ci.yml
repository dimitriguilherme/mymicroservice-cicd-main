workflow:
  rules:
    - if: $CI_COMMIT_BRANCH != "main" && $CI_PIPELINE_SOURCE != "merge_request_event"      
      when: never
    - when: always
    
variables:
  DEPLOYMENT_SERVER_HOST: "13.37.235.23"
  APP_ENDPOINT: http://ec2-13-37-235-23.eu-west-3.compute.amazonaws.com:3000

    stages:
  - build
  - deploy

############################
#build
  .build:
    stage: build
    tags:
      - ec2
      - remote
      - shell
    variables:
      MICRO_SERVICE: ""
      SERVICE_VERSION: ""
    before_script:
      - cd frontend
      - export IMAGE_NAME=$CI_REGISTRY_IMAGE/microservice/$MICRO_SERVICE
      - export IMAGE_TAG=$SERVICE_VERSION
    script:
      - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
      - docker build -t $IMAGE_NAME:$IMAGE_TAG .
      - docker push $IMAGE_NAME:$IMAGE_TAG


  build_frontend:
    extends: .build
    variables:
      MICRO_SERVICE: frontend
      SERVICE_VERSION: 1.3
    only: 
      changes:
        - "frontend/**/*"

  
  build_products:
    extends: .build
    variables:
      MICRO_SERVICE: products
      SERVICE_VERSION: 1.3
    only: 
      changes:
        - "products/**/*"

   build_shopping_cards:
    extends: .build
    variables:
      MICRO_SERVICE: shopping_cards
      SERVICE_VERSION: 1.3
    only: 
      changes:
        - "shopping_cards/**/*"     

#########################
#deploy
.deploy:
  stage: deploy
  tags:
      - ec2
      - remote
      - shell
  variables:
    MICROSERVICE: ""
    SERVICE_VERSION: ""
    APP_PORT: ""
  before_script:
    - chmod 400 $SSH_PRIVATE_KEY
    - export IMAGE_NAME=$CI_REGISTRY_IMAGE/microservice/$MICRO_SERVICE
    - export IMAGE_TAG=$SERVICE_VERSION
  script:
    - scp -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY ./docker-compose.yaml vader@DEPLOYMENT_SERVER_HOST:/home/ubuntu
    - ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY vader@DEPLOYMENT_SERVER_HOST:/home/ubuntu "
    docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY &&

    export COMPOSE_PROJECT_NAME=$MICRO_SERVICE &&
    export DC_IMAGE_NAME=$IMAGE_NAME
    export DC_IMAGE_TAG=$IMAGE_TAG &&
    export DC_APP &&

    docker-compose down
    docker-compose up -d"


environment:
  name: development
  url: $APP_ENDPOINT
   

deploy_frontend:
  extends: .deploy
  variables:
    MICRO_SERVICE: frontend
    SERVICE_VERSION: "1.3"
    APP_PORT: 3000
  only:
    changes:
      - "frontend/**/*"

  
deploy_products:
  extends: .deploy
  variables:
    MICRO_SERVICE: products
    SERVICE_VERSION: "1.8"
    APP_PORT: 3001
  only:
    changes:
      - "products/**/*"

deploy_shopping_cart:
  extends: .deploy
  variables:
    MICRO_SERVICE: shopping-cart
    SERVICE_VERSION: "2.1"
    APP_PORT: 3002
  only:
    changes:
      - "shopping-cart/**/*"











  
  # build_products:
  #   stage: build
  #   tags:
  #     - ec2
  #     - remote
  #     - shell
  #   before_script:
  #     - cd products
  #     - export IMAGE_NAME=$CI_REGISTRY_IMAGE/microservice/products
  #     - export IMAGE_TAG=1.8
  #   script:
  #     - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  #     - docker build -t $IMAGE_NAME:$IMAGE_TAG .
  #     - docker push $IMAGE_NAME:$IMAGE_TAG
  #   only: 
  #     changes:
  #       - "products/**/*"    


  # build_shopping_cards:
  #   stage: build
  #   tags:
  #     - ec2
  #     - remote
  #     - shell
  #   before_script:
  #     - cd shopping-cart
  #     - export IMAGE_NAME=$CI_REGISTRY_IMAGE/microservice/frontend
  #     - export IMAGE_TAG=2.1
  #   script:
  #     - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  #     - docker build -t $IMAGE_NAME:$IMAGE_TAG .
  #     - docker push $IMAGE_NAME:$IMAGE_TAG
  #   only: 
  #     changes:
  #       - "shopping_cards/**/*"